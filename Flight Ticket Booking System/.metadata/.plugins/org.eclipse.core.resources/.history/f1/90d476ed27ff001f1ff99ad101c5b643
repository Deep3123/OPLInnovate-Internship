package com.flight.management.service.impl;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Base64;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.stereotype.Component;

import com.flight.management.domain.UserEntity;

@Component
public class CustomPasswordResetTokenGenerator {

	private static final String SECRET_KEY = "dowmjmuiapmxlzpmjcio85a8aa9t49h7w9kjsakkcmsoopkmski7kiskskahjdk";

	// Method to generate token
	public String generateToken(UserEntity user) {
		long timestamp = LocalDateTime.now().toEpochSecond(ZoneOffset.UTC);
		String data = user.getUsername() + user.getPassword() + timestamp;

		return generateHmacSha256Token(data);
	}

	// Method to validate token
	public boolean validateToken(String token, UserEntity user) {
		long expirationTime = System.currentTimeMillis() - (60 * 60 * 1000); // Token valid for 1 hour
		long tokenTimestamp = getTimestampFromToken(token);

		if (tokenTimestamp < expirationTime) {
			return false;
		}

		String expectedToken = generateToken(user);
		return token.equals(expectedToken);
	}

	private String generateHmacSha256Token(String data) {
		try {
			Mac mac = Mac.getInstance("HmacSHA256");
			SecretKeySpec secretKeySpec = new SecretKeySpec(SECRET_KEY.getBytes(), "HmacSHA256");
			mac.init(secretKeySpec);
			byte[] bytes = mac.doFinal(data.getBytes());
			return Base64.getEncoder().encodeToString(bytes);
		} catch (Exception e) {
			throw new RuntimeException("Error generating token", e);
		}
	}

	private long getTimestampFromToken(String token) {
		// Decode the token and extract the timestamp (in your case it should be a part
		// of the token payload)
		return Long.parseLong(new String(Base64.getDecoder().decode(token)).split(":")[1]);
	}
}
